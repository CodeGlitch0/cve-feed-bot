using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using NistBot.Processor.Feeds;
using NistBot.Processor.Models;
using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace NistBot.Processor
{
    public class FeedLoader
    {
        private readonly ILogger _log;
        private readonly HttpClient _client;

        public FeedLoader(string baseUrl, ILogger log)
        {
            this._log = log;
            this._client = new HttpClient()
            {
                BaseAddress = new Uri(baseUrl)
            };

        }

        public Task<FeedMeta> GetLatestFeedMeta(string feedName)
        {
            _log.LogInformation($"Retrieving feed meta information...");
            return GetMeta(feedName);
        }

        public async Task<CveSummary[]> LoadFeed(string feedName, DateTimeOffset lastCheck, DateTimeOffset since)
        {
            _log.LogInformation($"Downloading '{feedName}' feed...");
            var feed = await GetFeed(feedName);

            var items = feed.CVE_Items
                .Where(x => DateTimeOffset.Parse(x.publishedDate) > since)
                .Select(i => CveSummary.FromFeed(i))
                .ToArray();

            _log.LogInformation($"{items.Length} new items found");

            return items;
        }

        private async Task<FeedMeta> GetMeta(string feedName)
        {
            var metaName = $"{feedName}.meta";

            var metaText = await _client.GetStringAsync(metaName);

            return FeedMeta.Parse(metaText);
        }

        private async Task<CVE_Feed> GetFeed(string feedName)
        {
            var fileName = $"{feedName}.json.gz";

            using (var content = await _client.GetStreamAsync(fileName))
            using (var decompressor = new GZipStream(content, CompressionMode.Decompress))
            using (var reader = new StreamReader(decompressor))
            {
                var json = await reader.ReadToEndAsync();
                return JsonConvert.DeserializeObject<CVE_Feed>(json);
            }
        }
    }
}
