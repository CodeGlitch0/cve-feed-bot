using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Microsoft.WindowsAzure.Storage.Table;
using NistBot.Models;

namespace NistBot
{
    public static class SubscribeSlackNotification
    {
        [FunctionName("SubscribeSlackNotification")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
            [Table("Webhooks")] CloudTable webhooks,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            dynamic data = JsonConvert.DeserializeObject(requestBody);

            if (data == null)
            {
                return new BadRequestObjectResult("Invalid request");
            }

            var url = data?.url.ToString();
            var uri = new Uri(url);

            var entry = new SlackWebhook()
            {
                PartitionKey = "slack",
                RowKey = Guid.NewGuid().ToString("D").ToLower(),
                WebhookUrl = uri.AbsoluteUri
            };

            var operation = TableOperation.Insert(entry);
            await webhooks.ExecuteAsync(operation);

            return entry != null
                ? (ActionResult)new OkObjectResult($"Webhook added")
                : new BadRequestObjectResult("Invalid request");
        }
    }
}
