using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;
using Microsoft.WindowsAzure.Storage.Table;
using Newtonsoft.Json;
using NistBot.Models;
using NistBot.Processor.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace NistBot
{
    public static class PublishedCveTrigger
    {
        [FunctionName("PublishedCveTrigger")]
        public static async Task Run(
            [QueueTrigger("recent-cves")] CveSummary[] items, 
            [Table("Webhooks")] CloudTable webhooksTable,
            ILogger log)
        {
            log.LogInformation($"PublishedCveTrigger function triggered ({items.Length} items) at: {DateTimeOffset.UtcNow}");

            StringBuilder message = new StringBuilder();
            foreach (var cve in items)
            {
                var itemMessage = $"{cve.Id}: {cve.Description}  More info: {cve.Link}";
                message.AppendLine(itemMessage);

                log.LogInformation(itemMessage);
            }

            var messageContent = message.ToString();
            var webhooks = await LoadWebhooks(webhooksTable, "slack");

            await PushSlackNotification(webhooks, messageContent);

            log.LogInformation($"PublishedCveTrigger function completed at: {DateTimeOffset.UtcNow}");
        }

        private static async Task<IEnumerable<SlackWebhook>> LoadWebhooks(CloudTable table, string partitionKey)
        {
            TableQuery<SlackWebhook> rangeQuery = new TableQuery<SlackWebhook>().Where(
                TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal,
                        partitionKey));

            return await table.ExecuteQuerySegmentedAsync(rangeQuery, null);
        }

        private static Task PushSlackNotification(IEnumerable<SlackWebhook> webhooks, string message)
        {
            var payload = JsonConvert.SerializeObject(new
            {
                text = message
            });

            var content = new StringContent(payload, Encoding.UTF8, "application/json");

            var client = new HttpClient();
            var tasks = webhooks
                .Select(x => client.PostAsync(x.WebhookUrl, content));

            return Task.WhenAll(tasks);
        }
    }
}
