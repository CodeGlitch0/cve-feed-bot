using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;
using Microsoft.WindowsAzure.Storage.Table;
using Newtonsoft.Json;
using NistBot.Models;
using NistBot.Processor.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace NistBot
{
    public static class PublishedCveTrigger
    {
        [FunctionName("PublishedCveTrigger")]
        public static async Task Run(
            [QueueTrigger("recent-cves")] CveSummary[] items, 
            [Table("Webhooks")] CloudTable webhooksTable,
            ILogger log)
        {
            log.LogInformation($"PublishedCveTrigger function triggered ({items.Length} items) at: {DateTimeOffset.UtcNow}");

            foreach (var cve in items)
            {
                var itemMessage = $"{cve.Id}: {cve.Description}  More info: {cve.Link}";
                log.LogInformation(itemMessage);
            }
            
            var webhooks = await LoadWebhooks(webhooksTable, "slack");
            await PushSlackNotification(items, webhooks);

            log.LogInformation($"PublishedCveTrigger function completed at: {DateTimeOffset.UtcNow}");
        }

        private static async Task<IEnumerable<SlackWebhook>> LoadWebhooks(CloudTable table, string partitionKey)
        {
            TableQuery<SlackWebhook> rangeQuery = new TableQuery<SlackWebhook>().Where(
                TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal,
                        partitionKey));

            return await table.ExecuteQuerySegmentedAsync(rangeQuery, null);
        }

        private static string GenerateSlackPayload(IEnumerable<CveSummary> items)
        {
            var results = items
                .Select(x => new
                {
                    fallback = $"*{x.Id}:* {x.Description} More Info: {x.Link}",
                    title = x.Id,
                    title_link = x.Link,
                    text = x.Description,
                    color = GetColor(x)
                });

            var payload = new
            {
                attachments = results.ToArray()
            };

            return JsonConvert.SerializeObject(payload);
        }

        private static string GetColor(CveSummary item)
        {
            switch (item.Impact)
            {
                case CveImpact.High:
                    return "danger";
                case CveImpact.Medium:
                    return "warning";
                case CveImpact.Low:
                    return "#439FE0";
                default:
                    return "#E0C8C3";
            }
        }

        private static Task PushSlackNotification(IEnumerable<CveSummary> items, IEnumerable<SlackWebhook> webhooks)
        {
            var payload = GenerateSlackPayload(items);

            var content = new StringContent(payload, Encoding.UTF8, "application/json");

            var client = new HttpClient();
            var tasks = webhooks
                .Select(x => client.PostAsync(x.WebhookUrl, content));

            return Task.WhenAll(tasks);
        }
    }
}
