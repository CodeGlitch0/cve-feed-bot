using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;
using Microsoft.WindowsAzure.Storage.Table;
using Newtonsoft.Json;
using NistBot.Models;
using NistBot.Processor;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace NistBot
{
    public static class CheckNistFeed
    {
        [FunctionName("CheckNistFeed")]
        [return: Queue("recent-cves")]
        public static async Task<string[]> Run(
            [TimerTrigger("0 */15 * * * *")]TimerInfo myTimer,
            [Table("CveRefreshState", "state", "recent-cves")] CveRefreshState refreshState,
            [Table("CveRefreshState")] CloudTable stateUpdater,
            ILogger log)
        {
            var correlationId = Guid.NewGuid().ToString("D").ToLower();
            using (var scope = log.BeginScope(correlationId))
            {
                log.LogInformation($"CheckNistFeed function triggered at: {DateTimeOffset.UtcNow}");

                var feedSourceUrl = GetEnvironmentVariable("NistFeedBaseUrl");
                var feedName = GetEnvironmentVariable("NistFeedName");
                var batchSize = Int32.Parse(GetEnvironmentVariable("CveBatchSize"));

                var lastChecked = refreshState != null ? 
                    refreshState.LastChecked : 
                    DateTimeOffset.Now.Subtract(TimeSpan.FromMinutes(240));
                var minPublishDate = refreshState != null ?
                    refreshState.LastPublishDate :
                    lastChecked;
                var now = DateTimeOffset.UtcNow;

                var loader = new FeedLoader(feedSourceUrl, log);
                var entries = await loader.LoadFeed(feedName, lastChecked, minPublishDate);

                var batches = entries
                    .Select((item, index) => new { item, index })
                    .GroupBy(x => x.index / batchSize)
                    .Select(g => g.Select(x => x.item))
                    .Select(b => JsonConvert.SerializeObject(b.ToArray()))
                    .ToArray();

                if (refreshState == null)
                {
                    refreshState = new CveRefreshState()
                    {
                        PartitionKey = "state",
                        RowKey = "recent-cves",
                        ETag = "*",
                        LastPublishDate = minPublishDate
                    };
                }

                refreshState.LastChecked = now;
                refreshState.LastPublishDate = entries.Length > 0 ? 
                    entries.Max(x => x.PublishDate) : 
                    refreshState.LastPublishDate;

                var operation = TableOperation.InsertOrReplace(refreshState);
                await stateUpdater.ExecuteAsync(operation);

                log.LogInformation($"CheckNistFeed function completed at: {DateTimeOffset.UtcNow}");

                return batches;
            }
        }

        public static string GetEnvironmentVariable(string name)
        {
            return Environment.GetEnvironmentVariable(name, EnvironmentVariableTarget.Process);
        }
    }
}
